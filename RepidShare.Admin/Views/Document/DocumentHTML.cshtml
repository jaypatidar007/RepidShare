@model RepidShare.Entities.DocumentModel
@{
    if (Model.DocumentID > 0)
    {
        ViewBag.Title = "Edit HTML Document";
    }
   
}
<div class="row">
    <div class="col-sm-12">
        <ol class="breadcrumb">
            <li><a href="/Home/Home">
                <img src="@Url.Content("~/Images/home-icon.png")"></a></li>
            <li>@Html.ActionLink("View Document", "ViewDocument", "Document")</li>
            <li class="active">@ViewBag.Title</li>
        </ol>
    </div>
</div>
<div class="row">
    <div class="col-sm-12">
        <h2 class="gray-heading">@ViewBag.Title</h2>
        <div class="white-bg">
            <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/chosen.css")" />
            <script src="@Url.Content("~/Scripts/chosen.jquery.min.js")" type="text/javascript"></script>
            <script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
            <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
            <script src="@Url.Content("~/Scripts/jquery.unobtrusive-ajax.min.js")" type="text/javascript"></script>
            @using (Html.BeginForm("DocumentHTML", "Document", FormMethod.Post, new { @id = "frmDocument" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.DocumentID, new { Value = Model.DocumentID, id = "hdnDocumentID" })
                @Html.HiddenFor(model => model.Message, new { Value = Model.Message, id = "hdnMessage" })
                @Html.HiddenFor(model => model.MessageType, new { Value = Model.MessageType, id = "hdnMessageType" })
                @Html.HiddenFor(model => model.DocumentHTML, new { id = "hdnDescription", Value = Model.DocumentHTML })

                <div class="row">
                    <div class="col-sm-3">
                        @Html.Label("Document HTML Text")
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12">
                        <span>&nbsp</span>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12">
                        @Html.Partial("_HTMLText", Model.DocumentHTML, new ViewDataDictionary<string>())
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12">
                        <span>&nbsp</span>
                    </div>
                </div>
                <div class="text-left button-group row">
                    <div class="col-sm-3">&nbsp;</div>
                    <div class="col-sm-4">
                        <input id="btnSave" class="btn btn-primary" type="button" value="Save" />
                        <input id="btnSubmit" class="btn btn-primary" type="submit" value="Save" style="display: none" />
                        <input id="btnCancel" type="button" class="btn cancel btn-primary" causesvalidation="false"
                            value="Cancel" />
                    </div>
                </div>
            }
        </div>
    </div>
</div>
<script type="text/javascript">

    $().ready(function () {
        // Show  Error Message on popup by common function showMessagePopup if any error found in hidden fields hdnMessage and hdnMessageType
        showMessagePopup("divMessage", $("#hdnMessageType").val(), $("#hdnMessage").val());
        //Submit the form on save button click
        $("#btnSave").click(function () {
            $("#hdnDescription").val($("#ckeditorBox").val());
            $("#btnSubmit").click()
        });

        //redirect to  Document List on Cancel button click
        $("#btnCancel").click(function () {
            window.location.href = "/Document/ViewDocument";
        });

    });

    var Index = {

        suggestions: [],

        init: function () {
            Index.bindEvents();
            $('#getNewSuggestionsButton1').click();
            Index.initCkEditor();
        },

        bindEvents: function () {
            Index.getSuggestionsFromServer('/Question/GetMappingList?DocumentId=' + @Model.DocumentID);
        },

        initCkEditor: function () {
            //Here "CKEDITOR.SHIFT + 51" is the key combination for '#'
            $('textarea#ckeditorBox').ckeditor({ suggestionsTriggerKey: { keyCode: CKEDITOR.SHIFT + 51 } });
            CKEDITOR.on('instanceReady', function (evt) {
                //Here 'Index.suggestions' is the Array which is holding the current list of suggestions
                CKEDITOR.instances.ckeditorBox.execCommand('reloadSuggetionBox', Index.suggestions);
            });
        },

        getSuggestionsFromServer: function (url) {
            Index.suggestions = [];
            Index.ajaxCall(url, '', Index.getSuggestionsFromServerCallback);
        },

        getSuggestionsFromServerCallback: function (response) {
            var sugggestions = response;
            $.each(sugggestions, function (index, sugggestion) {
                Index.suggestions.push({
                    "id": sugggestion.Value,
                    "label": sugggestion.Text
                });
            });
            CKEDITOR.instances.ckeditorBox.execCommand('reloadSuggetionBox', Index.suggestions);
        },

        ajaxCall: function (urlForAjax, dataForAjax, successCallBack) {
            $.ajax({
                type: 'Post',
                url: urlForAjax,
                data: dataForAjax,
                contentType: "application/json",
                dataType: "json",
                success: function (response) {
                    console.log(response);
                    if (response !== null) {
                        successCallBack(response);
                    } else {
                        alert("Unable to get a response from the server.");
                    }
                },
                error: function(xhr, status, error) {
                    alert(xhr.responseText);
                }
            });
        }


    }
</script>
